import 'dotenv/config';
import { Telegraf, Markup, Context } from 'telegraf';
import { ConfigStore } from './configStore.js';
import type { AdminSession, Ctx } from './types.js';

const token = process.env.BOT_TOKEN;
if (!token) throw new Error('‚ùå BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env');

const config = new ConfigStore();
await config.load();

const bot = new Telegraf<Ctx>(token);

// ‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî
const onlyPrivate = (ctx: Context) => ctx.chat?.type === 'private';
const ensureAdmin = (ctx: Ctx) => {
	if (!config.isAdmin(ctx.from.id)) {
		ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
		return false;
	}
	return true;
};
const ensureSuper = (ctx: Ctx) => {
	if (!config.isSuper(ctx.from.id)) {
		ctx.reply('‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.');
		return false;
	}
	return true;
};

const adminSessions = new Map<number, AdminSession>();

function getSession(userId: number): AdminSession {
	const s = adminSessions.get(userId);
	if (s) return s;
	const fresh: AdminSession = { mode: 'IDLE' };
	adminSessions.set(userId, fresh);
	return fresh;
}

function resetSession(userId: number) {
	adminSessions.set(userId, { mode: 'IDLE' });
}

function adminMenuKeyboard() {
	return Markup.inlineKeyboard([
		[Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É', 'ADM_ADD_BTN')],
		[Markup.button.callback('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É', 'ADM_EDIT_BTN')],
		[Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É', 'ADM_DEL_BTN')],
		[Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫', 'ADM_LIST_BTNS')],
		[Markup.button.callback('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', 'ADM_SET_WELCOME')],
		[Markup.button.callback('üí° –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç payload', 'ADM_SET_RESPONSE')],
		[Markup.button.callback('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'ADM_BACK_TO_MAIN')],
	]);
}

async function sendAdminPanel(ctx: Ctx) {
	const help =
		`‚öôÔ∏è Admin Panel

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É (–ª—é–±–æ–π –∫–ª—é—á)
‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É
‚Ä¢ –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ payload`;
	await ctx.reply(help, adminMenuKeyboard());
}

function buildKeyboard(ctx: Ctx | undefined, chapter: string) {
	const rows = config.get().buttons
		.filter((b) => b.chapter === chapter)
		.map((b) => {
			return b.type === 'callback'
				? [Markup.button.callback(b.label, b.payload)]
				: [Markup.button.url(b.label, b.url)];
		});

	// ‚Ü©Ô∏è –î–æ–±–∞–≤–ª—è–µ–º ¬´–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö, –∫—Ä–æ–º–µ MAIN
	if (chapter !== 'MAIN') {
		rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'MAIN')]);
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/—Å—É–ø–µ—Ä—é–∑–µ—Ä–æ–≤
	if (ctx && ctx.chat?.type === 'private' && config.isAdmin(ctx.from.id)) {
		rows.push([Markup.button.callback('‚öôÔ∏è Admin Panel', 'ADMIN')]);
	}

	return Markup.inlineKeyboard(rows);
}

// ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥—ã —Å–ø—Ä–∞–≤–∫–∏ ‚Äî‚Äî‚Äî
bot.command('whoami', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	await ctx.reply(`–í–∞—à ID: \`${ctx.from.id}\``, { parse_mode: 'Markdown' });
});

bot.command('help', async (ctx) => {
	if (!onlyPrivate(ctx)) return;

	const isAdmin = config.isAdmin(ctx.from.id);
	const isSuper = config.isSuper(ctx.from.id);

	const base = [
		'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
		'‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–≥–ª–∞–≤–∞ MAIN)',
		'‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID',
		'‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞',
	];

	const admin = !isAdmin ? [] : [
		'',
		'‚Äî –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ‚Äî',
		'‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚öôÔ∏è Admin Panel¬ª –≤–Ω–∏–∑—É ‚Äî —Ç–∞–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.',
		'‚Ä¢ /setwelcome <—Ç–µ–∫—Å—Ç> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
		'‚Ä¢ /setresponse <payload> | <—Ç–µ–∫—Å—Ç> ‚Äî —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback-–∫–Ω–æ–ø–∫—É',
		'‚Ä¢ /addbtn_callback <id> | <label> | <payload>',
		'‚Ä¢ /addbtn_callback <id> | <label> | <chapter> | <payload>',
		'‚Ä¢ /addbtn_url <id> | <label> | <url>',
		'‚Ä¢ /addbtn_url <id> | <label> | <chapter> | <url>',
		'‚Ä¢ /renamebtn <id> | <new label> ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É',
		'‚Ä¢ /delbtn <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É',
		'',
		'–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:',
		'‚Ä¢ chapter –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫–æ–º ¬´—Ä–∞–∑–¥–µ–ª–µ¬ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MAIN, PRODUCT_GROUP).',
		'‚Ä¢ –ï—Å–ª–∏ payload —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–ª–∞–≤—ã, –ø–æ –Ω–∞–∂–∞—Ç–∏—é –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —ç—Ç–∞ –≥–ª–∞–≤–∞.',
	];

	const superSec = !isSuper ? [] : [
		'',
		'‚Äî –ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî',
		'‚Ä¢ /addadmin <userId> ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞',
		'‚Ä¢ /addadmin (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥—Ä–µ—Å–∞—Ç—É',
		'‚Ä¢ /deladmin <userId> ‚Äî –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞',
	];

	const helpText = [...base, ...admin, ...superSec].join('\n');

	await ctx.reply(helpText);
});


// ‚Äî‚Äî‚Äî –ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –∏ —Å—Ç–∞—Ä—Ç ‚Äî‚Äî‚Äî
bot.start(async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	const name = ctx.from?.first_name ? `, ${ctx.from.first_name}` : '';
	await ctx.reply(`${config.get().texts.welcome}${name}`, buildKeyboard(ctx as Ctx, 'MAIN'));
});

bot.command('menu', (ctx) => {
	if (!onlyPrivate(ctx)) return;
	ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', buildKeyboard(ctx as Ctx, 'MAIN'));
});

// ‚Äî‚Äî‚Äî –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ (callback) ‚Äî‚Äî‚Äî
bot.on('callback_query', async (ctx) => {
	const data = (ctx.callbackQuery as any)?.data as string | undefined;
	if (!data) return;

	// ADMIN ‚Äî ¬´—Ä–∞–∑–¥–µ–ª¬ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
	if (data === 'ADMIN') {
		if (!config.isAdmin((ctx as Ctx).from.id)) {
			await ctx.answerCbQuery('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.', { show_alert: true });
			return;
		}
		await ctx.answerCbQuery();
		resetSession((ctx as Ctx).from.id);
		await sendAdminPanel(ctx as Ctx);
		return;
	}

	// ADM_* ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω-–º–µ–Ω—é (–µ–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—É—Ç)
	if (data.startsWith('ADM_')) {
		const uid = (ctx as Ctx).from.id;
		if (!config.isAdmin(uid)) {
			await ctx.answerCbQuery('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.', { show_alert: true });
			return;
		}
		await ctx.answerCbQuery();
		const s = getSession(uid);

		switch (data) {
			case 'ADM_ADD_BTN':
				s.mode = 'ADD_BTN__ASK_ALL';
				await ctx.reply(
					'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n' +
					'`id | label | type(callback|url) | chapter | payload_or_url`',
					{ parse_mode: 'Markdown' }
				);
				return;

			case 'ADM_DEL_BTN':
				s.mode = 'DEL_BTN__ASK_ID';
				await ctx.reply('–£–∫–∞–∂–∏—Ç–µ `id` –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.', { parse_mode: 'Markdown' });
				return;

			case 'ADM_EDIT_BTN':
				s.mode = 'EDIT_BTN__ASK_ID';
				await ctx.reply('–£–∫–∞–∂–∏—Ç–µ `id` –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', { parse_mode: 'Markdown' });
				return;

			case 'ADM_LIST_BTNS': {
				const btns = config.get().buttons
					.map(b => `‚Ä¢ id: ${b.id} | label: ${b.label} | type: ${'type' in b ? b.type : 'n/a'} | chapter: ${b.chapter}`)
					.join('\n');
				await ctx.reply(btns || '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
				return;
			}

			case 'ADM_SET_WELCOME':
				s.mode = 'SET_WELCOME__ASK_TEXT';
				await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).');
				return;

			case 'ADM_SET_RESPONSE':
				s.mode = 'SET_RESPONSE__ASK_BOTH';
				await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: `payload | —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞`', { parse_mode: 'Markdown' });
				return;

			case 'ADM_BACK_TO_MAIN':
				resetSession(uid);
				await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', buildKeyboard(ctx as Ctx, 'MAIN'));
				return;

			default:
				// –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ADM_ –∫–µ–π—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ
				return;
		}
	}

	// –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
	await ctx.answerCbQuery();

	const cfg = config.get();

	// –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª (–µ—Å–ª–∏ payload —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å chapter)
	const hasChapter = cfg.buttons.some((b) => b.chapter === data);
	if (hasChapter) {
		// –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à–∏ —ç—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∞
		await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', buildKeyboard(ctx as Ctx, data));
		return;
	}

	const resp = cfg.responses[data];
	if (resp) {
		await ctx.reply(resp, buildKeyboard(ctx as Ctx, 'MAIN'));
	} else {
		await ctx.reply('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ /setresponse.', buildKeyboard(ctx as Ctx, 'MAIN'));
	}
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
bot.action('ADM_ADD_BTN', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const s = getSession(uid);
	s.mode = 'ADD_BTN__ASK_ALL';
	await ctx.reply(
		'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n' +
		'`id | label | type(callback|url) | chapter | payload_or_url`',
		{ parse_mode: 'Markdown' }
	);
});

// üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É
bot.action('ADM_DEL_BTN', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const s = getSession(uid);
	s.mode = 'DEL_BTN__ASK_ID';
	await ctx.reply('–£–∫–∞–∂–∏—Ç–µ `id` –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.', { parse_mode: 'Markdown' });
});

// üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É (–ª—é–±–æ–π –∫–ª—é—á)
bot.action('ADM_EDIT_BTN', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const s = getSession(uid);
	s.mode = 'EDIT_BTN__ASK_ID';
	await ctx.reply('–£–∫–∞–∂–∏—Ç–µ `id` –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', { parse_mode: 'Markdown' });
});

// üìã –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
bot.action('ADM_LIST_BTNS', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const btns = config.get().buttons
		.map(b => `‚Ä¢ id: ${b.id} | label: ${b.label} | type: ${'type' in b ? b.type : 'n/a'} | chapter: ${b.chapter}`)
		.join('\n');
	await ctx.reply(btns || '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
});

// üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.action('ADM_SET_WELCOME', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const s = getSession(uid);
	s.mode = 'SET_WELCOME__ASK_TEXT';
	await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).');
});

// üí° –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç payload
bot.action('ADM_SET_RESPONSE', async (ctx) => {
	await ctx.answerCbQuery();
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return ctx.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.');
	const s = getSession(uid);
	s.mode = 'SET_RESPONSE__ASK_BOTH';
	await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: `payload | —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞`', { parse_mode: 'Markdown' });
});

// ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action('ADM_BACK_TO_MAIN', async (ctx) => {
	await ctx.answerCbQuery();
	resetSession((ctx as Ctx).from.id);
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', buildKeyboard(ctx as Ctx, 'MAIN'));
});

bot.on('message', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	const uid = (ctx as Ctx).from.id;
	if (!config.isAdmin(uid)) return; // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–∞—Ö

	const s = getSession(uid);
	const text = (ctx.message as any).text?.trim() || '';

	// 1) ADD_BTN__ASK_ALL
	if (s.mode === 'ADD_BTN__ASK_ALL') {
		const parts = text.split('|').map((x: string) => x.trim());
		const [id, label, typeRaw, chapter, rest] = parts;
		if (!id || !label || !typeRaw || !chapter || !rest) {
			return ctx.reply('–ù—É–∂–Ω–æ 5 –ø–æ–ª–µ–π: `id | label | type(callback|url) | chapter | payload_or_url`', { parse_mode: 'Markdown' });
		}
		const type = typeRaw.toLowerCase();
		try {
			if (type === 'callback') {
				config.addButton({ id, label, chapter, type: 'callback', payload: rest });
			} else if (type === 'url') {
				config.addButton({ id, label, chapter, type: 'url', url: rest });
			} else {
				return ctx.reply('–ü–æ–ª–µ type –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `callback` –∏–ª–∏ `url`.');
			}
			await config.save();
			resetSession(uid);
			await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" –¥–æ–±–∞–≤–ª–µ–Ω–∞.`, adminMenuKeyboard());
		} catch (e: any) {
			await ctx.reply('–û—à–∏–±–∫–∞: ' + e.message);
		}
		return;
	}

	// 2) DEL_BTN__ASK_ID
	if (s.mode === 'DEL_BTN__ASK_ID') {
		const id = text;
		config.removeButton(id);
		await config.save();
		resetSession(uid);
		await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" —É–¥–∞–ª–µ–Ω–∞.`, adminMenuKeyboard());
		return;
	}

	// 3) EDIT_BTN__ASK_ID -> –∑–∞—Ç–µ–º EDIT_BTN__ASK_KEY -> –∑–∞—Ç–µ–º EDIT_BTN__ASK_VALUE
	if (s.mode === 'EDIT_BTN__ASK_ID') {
		const id = text;
		const btn = config.get().buttons.find(b => b.id === id);
		if (!btn) return ctx.reply('–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫.');
		s.workingButtonId = id;
		s.mode = 'EDIT_BTN__ASK_KEY';
		const hintKeys =
			`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n` +
			`id, label, type(callback|url), chapter, payload(–¥–ª—è callback), url(–¥–ª—è url)\n` +
			`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.`;
		await ctx.reply(hintKeys);
		return;
	}

	if (s.mode === 'EDIT_BTN__ASK_KEY') {
		const key = text;
		s.workingKey = key;
		s.mode = 'EDIT_BTN__ASK_VALUE';
		await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ "${key}".`);
		return;
	}

	if (s.mode === 'EDIT_BTN__ASK_VALUE') {
		const id = s.workingButtonId!;
		const key = s.workingKey!;
		const value = text;

		const all = config.get().buttons;
		const idx = all.findIndex(b => b.id === id);
		if (idx === -1) {
			resetSession(uid);
			return ctx.reply('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–∞).', adminMenuKeyboard());
		}

		const btn = all[idx];

		try {
			// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–ª—é—á–∞–º
			if (key === 'id') {
				if (all.some(b => b.id === value && b !== btn)) throw new Error('id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
				(btn as any).id = value;
			} else if (key === 'label' || key === 'chapter') {
				(btn as any)[key] = value;
			} else if (key === 'type') {
				const low = value.toLowerCase();
				if (low !== 'callback' && low !== 'url') throw new Error('type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å callback –∏–ª–∏ url');
				// –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª—è
				if (low === 'callback') {
					(btn as any).type = 'callback';
					delete (btn as any).url;
					if (!(btn as any).payload) (btn as any).payload = '';
				} else {
					(btn as any).type = 'url';
					delete (btn as any).payload;
					if (!(btn as any).url) (btn as any).url = 'https://';
				}
			} else if (key === 'payload') {
				if ((btn as any).type !== 'callback') throw new Error('payload –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è type=callback');
				(btn as any).payload = value;
			} else if (key === 'url') {
				if ((btn as any).type !== 'url') throw new Error('url –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è type=url');
				(btn as any).url = value;
			} else {
				throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á. –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ: id, label, type, chapter, payload, url');
			}

			all[idx] = btn;
			await config.save();
			resetSession(uid);
			await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`, adminMenuKeyboard());
		} catch (e: any) {
			await ctx.reply('–û—à–∏–±–∫–∞: ' + e.message);
		}
		return;
	}

	// 4) SET_WELCOME__ASK_TEXT
	if (s.mode === 'SET_WELCOME__ASK_TEXT') {
		config.setWelcome(text);
		await config.save();
		resetSession(uid);
		await ctx.reply('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', adminMenuKeyboard());
		return;
	}

	// 5) SET_RESPONSE__ASK_BOTH
	if (s.mode === 'SET_RESPONSE__ASK_BOTH') {
		const msgText = (ctx.message as any).text;
		if (typeof msgText !== 'string') {
			return ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: `payload | —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞`', { parse_mode: 'Markdown' });
		}

		const [payload, ...rest] = msgText
			.split('|')
			.map((x: string) => x.trim());  // ‚Üê —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–ª–∏ x

		const ans = rest.join('|').trim();

		if (!payload || !ans) {
			return ctx.reply('–ù—É–∂–Ω–æ: `payload | —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞`', { parse_mode: 'Markdown' });
		}

		config.setResponse(payload, ans);
		await config.save();
		resetSession(uid);
		await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è payload "${payload}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`, adminMenuKeyboard());
		return;
	}

	// –µ—Å–ª–∏ –º—ã —Ç—É—Ç ‚Äî –ª–∏–±–æ IDLE, –ª–∏–±–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí –Ω–∏—á–µ–≥–æ
});

// ‚Äî‚Äî‚Äî –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚Äî‚Äî‚Äî
// /setwelcome <—Ç–µ–∫—Å—Ç>
bot.command('setwelcome', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;
	const text = ctx.message?.text?.replace('/setwelcome', '').trim();
	if (!text) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setwelcome <—Ç–µ–∫—Å—Ç>');
	config.setWelcome(text);
	await config.save();
	await ctx.reply('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');
});

// /setresponse <payload> | <—Ç–µ–∫—Å—Ç>
bot.command('setresponse', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;
	const raw = ctx.message?.text?.replace('/setresponse', '').trim() || '';
	const [payload, ...rest] = raw.split('|').map((s) => s.trim());
	const text = rest.join('|').trim();
	if (!payload || !text) {
		return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setresponse <payload> | <—Ç–µ–∫—Å—Ç>');
	}
	config.setResponse(payload, text);
	await config.save();
	await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è payload "${payload}" –æ–±–Ω–æ–≤–ª—ë–Ω.`);
});

// /addbtn_callback <id> | <label> | <payload>
bot.command('addbtn_callback', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;

	const raw = ctx.message?.text?.replace('/addbtn_callback', '').trim() || '';
	const parts = raw.split('|').map((s: string) => s.trim()).filter(Boolean);

	let id: string | undefined;
	let label: string | undefined;
	let chapter = 'MAIN';
	let payload: string | undefined;

	if (parts.length === 3) {
		[id, label, payload] = parts;
	} else if (parts.length === 4) {
		[id, label, chapter, payload] = parts;
	} else {
		return ctx.reply(
			'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n' +
			'‚Ä¢ /addbtn_callback <id> | <label> | <payload>\n' +
			'‚Ä¢ /addbtn_callback <id> | <label> | <chapter> | <payload>'
		);
	}

	if (!id || !label || !payload) {
		return ctx.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.');
	}

	try {
		config.addButton({ id, label, chapter, type: 'callback', payload });
		await config.save();
		await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ (chapter: ${chapter}).`);
	} catch (e: any) {
		await ctx.reply('–û—à–∏–±–∫–∞: ' + e.message);
	}
});

// /addbtn_url <id> | <label> | <url>
bot.command('addbtn_url', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;

	const raw = ctx.message?.text?.replace('/addbtn_url', '').trim() || '';
	const parts = raw.split('|').map((s: string) => s.trim()).filter(Boolean);

	let id: string | undefined;
	let label: string | undefined;
	let chapter = 'MAIN';
	let url: string | undefined;

	if (parts.length === 3) {
		[id, label, url] = parts;
	} else if (parts.length === 4) {
		[id, label, chapter, url] = parts;
	} else {
		return ctx.reply(
			'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n' +
			'‚Ä¢ /addbtn_url <id> | <label> | <url>\n' +
			'‚Ä¢ /addbtn_url <id> | <label> | <chapter> | <url>'
		);
	}

	if (!id || !label || !url) {
		return ctx.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.');
	}

	try {
		config.addButton({ id, label, chapter, type: 'url', url });
		await config.save();
		await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ (chapter: ${chapter}).`);
	} catch (e: any) {
		await ctx.reply('–û—à–∏–±–∫–∞: ' + e.message);
	}
});

// /renamebtn <id> | <new label>
bot.command('renamebtn', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;
	const raw = ctx.message?.text?.replace('/renamebtn', '').trim() || '';
	const [id, newLabel] = raw.split('|').map((s) => s.trim());
	if (!id || !newLabel) {
		return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /renamebtn <id> | <new label>');
	}
	try {
		config.renameButton(id, newLabel);
		await config.save();
		await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞.`);
	} catch (e: any) {
		await ctx.reply('–û—à–∏–±–∫–∞: ' + e.message);
	}
});

// /delbtn <id>
bot.command('delbtn', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureAdmin(ctx as Ctx)) return;
	const id = ctx.message?.text?.replace('/delbtn', '').trim();
	if (!id) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delbtn <id>');
	config.removeButton(id);
	await config.save();
	await ctx.reply(`‚úÖ –ö–Ω–æ–ø–∫–∞ "${id}" —É–¥–∞–ª–µ–Ω–∞.`);
});

// ‚Äî‚Äî‚Äî –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ ‚Äî‚Äî‚Äî
// /addadmin <userId>  –ò–õ–ò –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /addadmin
bot.command('addadmin', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureSuper(ctx as Ctx)) return;

	const text = ctx.message?.text || '';
	const arg = text.replace('/addadmin', '').trim();

	let userId: number | null = null;

	if (arg) {
		const parsed = Number(arg);
		if (!Number.isFinite(parsed)) {
			return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <userId> –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
		}
		userId = parsed;
	} else {
		const reply = (ctx.message as any).reply_to_message;
		if (reply?.from?.id) userId = reply.from.id;
	}

	if (!userId) return ctx.reply('–ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å userId. –£–∫–∞–∂–∏ /addadmin <userId> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /addadmin.');
	if (Array.isArray(config.get().superUserIds) && config.get().superUserIds.includes(userId)) {
		return ctx.reply('–≠—Ç–æ –∏ —Ç–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üôÇ');
	}

	config.addAdmin(userId);
	await config.save();
	await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.`);
});

// /deladmin <userId>
bot.command('deladmin', async (ctx) => {
	if (!onlyPrivate(ctx)) return;
	if (!ensureSuper(ctx as Ctx)) return;
	const arg = ctx.message?.text?.replace('/deladmin', '').trim();
	const id = Number(arg);
	if (!arg || !Number.isFinite(id)) {
		return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deladmin <userId>');
	}
	if (Array.isArray(config.get().superUserIds) && config.get().superUserIds.includes(id)) {
		return ctx.reply('–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
	}
	config.removeAdmin(id);
	await config.save();
	await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.`);
});

// ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî
bot.launch().then(() => console.log('‚úÖ Bot started with dynamic admin & menu')).catch(console.error);
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
